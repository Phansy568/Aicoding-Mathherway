{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { knowledgeGraphData } from '../../data/knowledgeGraphData';\nconst initialState = knowledgeGraphData;\nconst graphSlice = createSlice({\n  name: 'graph',\n  initialState,\n  reducers: {\n    addNode: (state, action) => {\n      state.nodes.push(action.payload);\n    },\n    addEdge: (state, action) => {\n      state.edges.push(action.payload);\n    },\n    updateNode: (state, action) => {\n      const node = state.nodes.find(n => n.id === action.payload.id);\n      if (node) {\n        Object.assign(node, action.payload.updates);\n      }\n    }\n  }\n});\nexport const {\n  addNode,\n  addEdge,\n  updateNode\n} = graphSlice.actions;\nexport default graphSlice.reducer;","map":{"version":3,"names":["createSlice","knowledgeGraphData","initialState","graphSlice","name","reducers","addNode","state","action","nodes","push","payload","addEdge","edges","updateNode","node","find","n","id","Object","assign","updates","actions","reducer"],"sources":["D:/BaiduSyncdisk/大学/竞赛、项目/AI编程/frontend/src/store/slices/graphSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { GraphData, KnowledgeNode, KnowledgeEdge } from '../../components/KnowledgeGraph/types';\r\nimport { knowledgeGraphData } from '../../data/knowledgeGraphData';\r\n\r\nconst initialState: GraphData = knowledgeGraphData;\r\n\r\nconst graphSlice = createSlice({\r\n  name: 'graph',\r\n  initialState,\r\n  reducers: {\r\n    addNode: (state, action: PayloadAction<KnowledgeNode>) => {\r\n      state.nodes.push(action.payload);\r\n    },\r\n    addEdge: (state, action: PayloadAction<KnowledgeEdge>) => {\r\n      state.edges.push(action.payload);\r\n    },\r\n    updateNode: (state, action: PayloadAction<{ id: string; updates: Partial<KnowledgeNode> }>) => {\r\n      const node = state.nodes.find(n => n.id === action.payload.id);\r\n      if (node) {\r\n        Object.assign(node, action.payload.updates);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { addNode, addEdge, updateNode } = graphSlice.actions;\r\nexport default graphSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,kBAAkB,QAAQ,+BAA+B;AAElE,MAAMC,YAAuB,GAAGD,kBAAkB;AAElD,MAAME,UAAU,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAE,OAAO;EACbF,YAAY;EACZG,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAoC,KAAK;MACxDD,KAAK,CAACE,KAAK,CAACC,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC;IAClC,CAAC;IACDC,OAAO,EAAEA,CAACL,KAAK,EAAEC,MAAoC,KAAK;MACxDD,KAAK,CAACM,KAAK,CAACH,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC;IAClC,CAAC;IACDG,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAsE,KAAK;MAC7F,MAAMO,IAAI,GAAGR,KAAK,CAACE,KAAK,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKV,MAAM,CAACG,OAAO,CAACO,EAAE,CAAC;MAC9D,IAAIH,IAAI,EAAE;QACRI,MAAM,CAACC,MAAM,CAACL,IAAI,EAAEP,MAAM,CAACG,OAAO,CAACU,OAAO,CAAC;MAC7C;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEf,OAAO;EAAEM,OAAO;EAAEE;AAAW,CAAC,GAAGX,UAAU,CAACmB,OAAO;AAClE,eAAenB,UAAU,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}